// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: employee_proto.proto

package employee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenEmployeeRegisterService_RegisterEmployee_FullMethodName = "/employee.TokenEmployeeRegisterService/RegisterEmployee"
)

// TokenEmployeeRegisterServiceClient is the client API for TokenEmployeeRegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenEmployeeRegisterServiceClient interface {
	RegisterEmployee(ctx context.Context, in *TokenEmployeeRegisterRequest, opts ...grpc.CallOption) (*TokenEmployeeRegisterResponse, error)
}

type tokenEmployeeRegisterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenEmployeeRegisterServiceClient(cc grpc.ClientConnInterface) TokenEmployeeRegisterServiceClient {
	return &tokenEmployeeRegisterServiceClient{cc}
}

func (c *tokenEmployeeRegisterServiceClient) RegisterEmployee(ctx context.Context, in *TokenEmployeeRegisterRequest, opts ...grpc.CallOption) (*TokenEmployeeRegisterResponse, error) {
	out := new(TokenEmployeeRegisterResponse)
	err := c.cc.Invoke(ctx, TokenEmployeeRegisterService_RegisterEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenEmployeeRegisterServiceServer is the server API for TokenEmployeeRegisterService service.
// All implementations must embed UnimplementedTokenEmployeeRegisterServiceServer
// for forward compatibility
type TokenEmployeeRegisterServiceServer interface {
	RegisterEmployee(context.Context, *TokenEmployeeRegisterRequest) (*TokenEmployeeRegisterResponse, error)
	mustEmbedUnimplementedTokenEmployeeRegisterServiceServer()
}

// UnimplementedTokenEmployeeRegisterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenEmployeeRegisterServiceServer struct {
}

func (UnimplementedTokenEmployeeRegisterServiceServer) RegisterEmployee(context.Context, *TokenEmployeeRegisterRequest) (*TokenEmployeeRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEmployee not implemented")
}
func (UnimplementedTokenEmployeeRegisterServiceServer) mustEmbedUnimplementedTokenEmployeeRegisterServiceServer() {
}

// UnsafeTokenEmployeeRegisterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenEmployeeRegisterServiceServer will
// result in compilation errors.
type UnsafeTokenEmployeeRegisterServiceServer interface {
	mustEmbedUnimplementedTokenEmployeeRegisterServiceServer()
}

func RegisterTokenEmployeeRegisterServiceServer(s grpc.ServiceRegistrar, srv TokenEmployeeRegisterServiceServer) {
	s.RegisterService(&TokenEmployeeRegisterService_ServiceDesc, srv)
}

func _TokenEmployeeRegisterService_RegisterEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenEmployeeRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenEmployeeRegisterServiceServer).RegisterEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenEmployeeRegisterService_RegisterEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenEmployeeRegisterServiceServer).RegisterEmployee(ctx, req.(*TokenEmployeeRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenEmployeeRegisterService_ServiceDesc is the grpc.ServiceDesc for TokenEmployeeRegisterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenEmployeeRegisterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee.TokenEmployeeRegisterService",
	HandlerType: (*TokenEmployeeRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEmployee",
			Handler:    _TokenEmployeeRegisterService_RegisterEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_proto.proto",
}
