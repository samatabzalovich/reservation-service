// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: inst.proto

package inst

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InstitutionService_GetInstitution_FullMethodName                 = "/inst.InstitutionService/GetInstitution"
	InstitutionService_CreateInstitution_FullMethodName              = "/inst.InstitutionService/CreateInstitution"
	InstitutionService_UpdateInstitution_FullMethodName              = "/inst.InstitutionService/UpdateInstitution"
	InstitutionService_DeleteInstitution_FullMethodName              = "/inst.InstitutionService/DeleteInstitution"
	InstitutionService_SearchInstitutions_FullMethodName             = "/inst.InstitutionService/SearchInstitutions"
	InstitutionService_GetForToken_FullMethodName                    = "/inst.InstitutionService/GetForToken"
	InstitutionService_GetInstitutionsForOwner_FullMethodName        = "/inst.InstitutionService/GetInstitutionsForOwner"
	InstitutionService_GetInstitutionForEmployee_FullMethodName      = "/inst.InstitutionService/GetInstitutionForEmployee"
	InstitutionService_GetInstitutionsForUserEmployee_FullMethodName = "/inst.InstitutionService/GetInstitutionsForUserEmployee"
)

// InstitutionServiceClient is the client API for InstitutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstitutionServiceClient interface {
	GetInstitution(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*Institution, error)
	CreateInstitution(ctx context.Context, in *CreateInstitutionRequest, opts ...grpc.CallOption) (*CreateInstitutionResponse, error)
	UpdateInstitution(ctx context.Context, in *UpdateInstitutionRequest, opts ...grpc.CallOption) (*UpdateInstitutionResponse, error)
	DeleteInstitution(ctx context.Context, in *DeleteInstitutionRequest, opts ...grpc.CallOption) (*DeleteInstitutionResponse, error)
	SearchInstitutions(ctx context.Context, in *SearchInstitutionsRequest, opts ...grpc.CallOption) (*InstitutionsResponse, error)
	GetForToken(ctx context.Context, in *GetInstForTokenRequest, opts ...grpc.CallOption) (*Institution, error)
	GetInstitutionsForOwner(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*InstitutionsResponse, error)
	GetInstitutionForEmployee(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*Institution, error)
	GetInstitutionsForUserEmployee(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*InstitutionsResponse, error)
}

type institutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstitutionServiceClient(cc grpc.ClientConnInterface) InstitutionServiceClient {
	return &institutionServiceClient{cc}
}

func (c *institutionServiceClient) GetInstitution(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*Institution, error) {
	out := new(Institution)
	err := c.cc.Invoke(ctx, InstitutionService_GetInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) CreateInstitution(ctx context.Context, in *CreateInstitutionRequest, opts ...grpc.CallOption) (*CreateInstitutionResponse, error) {
	out := new(CreateInstitutionResponse)
	err := c.cc.Invoke(ctx, InstitutionService_CreateInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) UpdateInstitution(ctx context.Context, in *UpdateInstitutionRequest, opts ...grpc.CallOption) (*UpdateInstitutionResponse, error) {
	out := new(UpdateInstitutionResponse)
	err := c.cc.Invoke(ctx, InstitutionService_UpdateInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) DeleteInstitution(ctx context.Context, in *DeleteInstitutionRequest, opts ...grpc.CallOption) (*DeleteInstitutionResponse, error) {
	out := new(DeleteInstitutionResponse)
	err := c.cc.Invoke(ctx, InstitutionService_DeleteInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) SearchInstitutions(ctx context.Context, in *SearchInstitutionsRequest, opts ...grpc.CallOption) (*InstitutionsResponse, error) {
	out := new(InstitutionsResponse)
	err := c.cc.Invoke(ctx, InstitutionService_SearchInstitutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) GetForToken(ctx context.Context, in *GetInstForTokenRequest, opts ...grpc.CallOption) (*Institution, error) {
	out := new(Institution)
	err := c.cc.Invoke(ctx, InstitutionService_GetForToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) GetInstitutionsForOwner(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*InstitutionsResponse, error) {
	out := new(InstitutionsResponse)
	err := c.cc.Invoke(ctx, InstitutionService_GetInstitutionsForOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) GetInstitutionForEmployee(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*Institution, error) {
	out := new(Institution)
	err := c.cc.Invoke(ctx, InstitutionService_GetInstitutionForEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *institutionServiceClient) GetInstitutionsForUserEmployee(ctx context.Context, in *GetInstitutionsByIdRequest, opts ...grpc.CallOption) (*InstitutionsResponse, error) {
	out := new(InstitutionsResponse)
	err := c.cc.Invoke(ctx, InstitutionService_GetInstitutionsForUserEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstitutionServiceServer is the server API for InstitutionService service.
// All implementations must embed UnimplementedInstitutionServiceServer
// for forward compatibility
type InstitutionServiceServer interface {
	GetInstitution(context.Context, *GetInstitutionsByIdRequest) (*Institution, error)
	CreateInstitution(context.Context, *CreateInstitutionRequest) (*CreateInstitutionResponse, error)
	UpdateInstitution(context.Context, *UpdateInstitutionRequest) (*UpdateInstitutionResponse, error)
	DeleteInstitution(context.Context, *DeleteInstitutionRequest) (*DeleteInstitutionResponse, error)
	SearchInstitutions(context.Context, *SearchInstitutionsRequest) (*InstitutionsResponse, error)
	GetForToken(context.Context, *GetInstForTokenRequest) (*Institution, error)
	GetInstitutionsForOwner(context.Context, *GetInstitutionsByIdRequest) (*InstitutionsResponse, error)
	GetInstitutionForEmployee(context.Context, *GetInstitutionsByIdRequest) (*Institution, error)
	GetInstitutionsForUserEmployee(context.Context, *GetInstitutionsByIdRequest) (*InstitutionsResponse, error)
	mustEmbedUnimplementedInstitutionServiceServer()
}

// UnimplementedInstitutionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstitutionServiceServer struct {
}

func (UnimplementedInstitutionServiceServer) GetInstitution(context.Context, *GetInstitutionsByIdRequest) (*Institution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstitution not implemented")
}
func (UnimplementedInstitutionServiceServer) CreateInstitution(context.Context, *CreateInstitutionRequest) (*CreateInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstitution not implemented")
}
func (UnimplementedInstitutionServiceServer) UpdateInstitution(context.Context, *UpdateInstitutionRequest) (*UpdateInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstitution not implemented")
}
func (UnimplementedInstitutionServiceServer) DeleteInstitution(context.Context, *DeleteInstitutionRequest) (*DeleteInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstitution not implemented")
}
func (UnimplementedInstitutionServiceServer) SearchInstitutions(context.Context, *SearchInstitutionsRequest) (*InstitutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInstitutions not implemented")
}
func (UnimplementedInstitutionServiceServer) GetForToken(context.Context, *GetInstForTokenRequest) (*Institution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForToken not implemented")
}
func (UnimplementedInstitutionServiceServer) GetInstitutionsForOwner(context.Context, *GetInstitutionsByIdRequest) (*InstitutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstitutionsForOwner not implemented")
}
func (UnimplementedInstitutionServiceServer) GetInstitutionForEmployee(context.Context, *GetInstitutionsByIdRequest) (*Institution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstitutionForEmployee not implemented")
}
func (UnimplementedInstitutionServiceServer) GetInstitutionsForUserEmployee(context.Context, *GetInstitutionsByIdRequest) (*InstitutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstitutionsForUserEmployee not implemented")
}
func (UnimplementedInstitutionServiceServer) mustEmbedUnimplementedInstitutionServiceServer() {}

// UnsafeInstitutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstitutionServiceServer will
// result in compilation errors.
type UnsafeInstitutionServiceServer interface {
	mustEmbedUnimplementedInstitutionServiceServer()
}

func RegisterInstitutionServiceServer(s grpc.ServiceRegistrar, srv InstitutionServiceServer) {
	s.RegisterService(&InstitutionService_ServiceDesc, srv)
}

func _InstitutionService_GetInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstitutionsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).GetInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_GetInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).GetInstitution(ctx, req.(*GetInstitutionsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_CreateInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).CreateInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_CreateInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).CreateInstitution(ctx, req.(*CreateInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_UpdateInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).UpdateInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_UpdateInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).UpdateInstitution(ctx, req.(*UpdateInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_DeleteInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).DeleteInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_DeleteInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).DeleteInstitution(ctx, req.(*DeleteInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_SearchInstitutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInstitutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).SearchInstitutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_SearchInstitutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).SearchInstitutions(ctx, req.(*SearchInstitutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_GetForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstForTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).GetForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_GetForToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).GetForToken(ctx, req.(*GetInstForTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_GetInstitutionsForOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstitutionsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).GetInstitutionsForOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_GetInstitutionsForOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).GetInstitutionsForOwner(ctx, req.(*GetInstitutionsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_GetInstitutionForEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstitutionsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).GetInstitutionForEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_GetInstitutionForEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).GetInstitutionForEmployee(ctx, req.(*GetInstitutionsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstitutionService_GetInstitutionsForUserEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstitutionsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstitutionServiceServer).GetInstitutionsForUserEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstitutionService_GetInstitutionsForUserEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstitutionServiceServer).GetInstitutionsForUserEmployee(ctx, req.(*GetInstitutionsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstitutionService_ServiceDesc is the grpc.ServiceDesc for InstitutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstitutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inst.InstitutionService",
	HandlerType: (*InstitutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstitution",
			Handler:    _InstitutionService_GetInstitution_Handler,
		},
		{
			MethodName: "CreateInstitution",
			Handler:    _InstitutionService_CreateInstitution_Handler,
		},
		{
			MethodName: "UpdateInstitution",
			Handler:    _InstitutionService_UpdateInstitution_Handler,
		},
		{
			MethodName: "DeleteInstitution",
			Handler:    _InstitutionService_DeleteInstitution_Handler,
		},
		{
			MethodName: "SearchInstitutions",
			Handler:    _InstitutionService_SearchInstitutions_Handler,
		},
		{
			MethodName: "GetForToken",
			Handler:    _InstitutionService_GetForToken_Handler,
		},
		{
			MethodName: "GetInstitutionsForOwner",
			Handler:    _InstitutionService_GetInstitutionsForOwner_Handler,
		},
		{
			MethodName: "GetInstitutionForEmployee",
			Handler:    _InstitutionService_GetInstitutionForEmployee_Handler,
		},
		{
			MethodName: "GetInstitutionsForUserEmployee",
			Handler:    _InstitutionService_GetInstitutionsForUserEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inst.proto",
}

const (
	CategoryService_GetInstitutionCategories_FullMethodName = "/inst.CategoryService/GetInstitutionCategories"
	CategoryService_CreateCategory_FullMethodName           = "/inst.CategoryService/CreateCategory"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	GetInstitutionCategories(ctx context.Context, in *GetInstitutionCategoriesRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	CreateCategory(ctx context.Context, in *InstitutionCategory, opts ...grpc.CallOption) (*InstitutionCategory, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) GetInstitutionCategories(ctx context.Context, in *GetInstitutionCategoriesRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CategoryService_GetInstitutionCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) CreateCategory(ctx context.Context, in *InstitutionCategory, opts ...grpc.CallOption) (*InstitutionCategory, error) {
	out := new(InstitutionCategory)
	err := c.cc.Invoke(ctx, CategoryService_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility
type CategoryServiceServer interface {
	GetInstitutionCategories(context.Context, *GetInstitutionCategoriesRequest) (*CategoryResponse, error)
	CreateCategory(context.Context, *InstitutionCategory) (*InstitutionCategory, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServiceServer struct {
}

func (UnimplementedCategoryServiceServer) GetInstitutionCategories(context.Context, *GetInstitutionCategoriesRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstitutionCategories not implemented")
}
func (UnimplementedCategoryServiceServer) CreateCategory(context.Context, *InstitutionCategory) (*InstitutionCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_GetInstitutionCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstitutionCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetInstitutionCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetInstitutionCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetInstitutionCategories(ctx, req.(*GetInstitutionCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstitutionCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).CreateCategory(ctx, req.(*InstitutionCategory))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inst.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstitutionCategories",
			Handler:    _CategoryService_GetInstitutionCategories_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _CategoryService_CreateCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inst.proto",
}
